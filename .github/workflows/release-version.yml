name: Version Bump on PR Merge

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true

permissions:
  contents: write
  pull-requests: read
env: 
  HUSKY: 0
  
jobs:
  version_bump:
    # This job will only run if the PR has been merged
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
        
      # Get PR Number (from input if manually triggered, from event payload if triggered by PR)
      - name: Set PR Number
        id: pr_number
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER"
          
      # Get PR Labels (manual trigger or PR closed)
      - name: Get PR Labels
        id: pr_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "PR_NUMBER=$PR_NUMBER"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PR_LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | tr '\n' ' ')
            echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          else
            PR_LABELS=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | tr '\n' ' ')
            echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          fi
          echo "PR_LABELS=$PR_LABELS"
          
      # Check for semver labels and extract all version types
      - name: Check semver labels and extract version types
        id: check_semver
        run: |
          # Define the allowed labels in priority order (major > minor > patch)
          ALLOWED_LABELS=("semver:major" "semver:minor" "semver:patch")
          # Initialize array to track matched labels
          MATCHED_LABELS=()
          
          # Loop through the allowed labels and check if they are in PR_LABELS
          for label in "${ALLOWED_LABELS[@]}"; do
            if [[ "$PR_LABELS" == *"$label"* ]]; then
              MATCHED_LABELS+=("$label")
            fi
          done
          
          # Check if no label is found
          if [[ ${#MATCHED_LABELS[@]} -eq 0 ]]; then
            echo "Error: No semver labels found. Please add at least one of the following labels: semver:major, semver:minor, semver:patch."
            exit 1
          fi
          
          # If multiple labels exist, apply them in order of highest precedence
          # Major > Minor > Patch
          VERSION_TYPES=""
          if [[ " ${MATCHED_LABELS[@]} " =~ " semver:major " ]]; then
            VERSION_TYPES="${VERSION_TYPES} major"
          fi
          if [[ " ${MATCHED_LABELS[@]} " =~ " semver:minor " ]]; then
            VERSION_TYPES="${VERSION_TYPES} minor"
          fi
          if [[ " ${MATCHED_LABELS[@]} " =~ " semver:patch " ]]; then
            VERSION_TYPES="${VERSION_TYPES} patch"
          fi
          
          # Trim leading space
          VERSION_TYPES=$(echo "$VERSION_TYPES" | sed 's/^ *//')
          
          echo "Found semver labels: ${MATCHED_LABELS[@]}"
          echo "VERSION_TYPES=$VERSION_TYPES" >> $GITHUB_ENV
          echo "VERSION_TYPES=$VERSION_TYPES"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.0'

      - name: Install dependencies
        run: npm ci

      - name: bump version
        run: |
          # Apply all version types in sequence
          for version_type in ${{ env.VERSION_TYPES }}; do
            echo "Applying $version_type version bump"
            npm run release "$version_type"
          done

      - name: Commit and push version bump changes
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: "chore: bump version (${{ env.VERSION_TYPES }})"
          add: "package.json"
          push: true



